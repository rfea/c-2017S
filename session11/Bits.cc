int main() {
	int a = 3 & 5;	// bitwise AND		0000000011 & 0000000101
	/*
	0000000011
	0000000101
	==========
	0000000001 = 1
	
	*/

	int b = 3 | 5; 	// bitwise OR
	/*
	0000000011
	0000000101
	==========
	0000000111 = 7
	
	*/

	int c = 3 ^ 5;	// bitwise XOR
	/*
	0000000011
	0000000101
	==========
	0000000110 = 6
	
	*/

	int d = ~3;		// NOT
	/*
	00000000000000000000000000000011		32 bits
	11111111111111111111111111111100
	
	*/

	int e = 1 << 5;		// left shift by 5
						// equivalent to multiplying by 2 to the k
	/*
	00000000000000000000000000000001		32 bits
	00000000000000000000000000100000
	
	*/

	int f = 1024 >> 3;	// right shift
						// equivalent to dividing by 2 to the k
	/*
	00000000000000001000000000000000 = 1024
	00000000000000000001000000000000 = 128 = 2 to the 7
	
	*/

	int g = 5;

	g <<=2;

	// there are 12 op= types		
	// +=    -=    /=    %=    &=    |=    ^=    <<=    >>=
	// x = x OP y	==>  x OP= y

	const int m = 16 * 1024 * 1024 * 3;
	x /=3; // compiler might do: x * m >> 24

}