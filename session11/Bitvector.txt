Bitvec primes(1000000000); // 1 billion bytes is big! 125 Mb is a lot better

class BitVec {
private:
	uint64_t* bits;
	uint32_t size;
public:
	BitVec(uint32_t size) : bits(new uint64_t[(size+63)/64]) ss{

	}

	// constructor, destructor, copy constructor, operator = ...

	void set(uint32_t index) {}
	void clear(uint32_t index) {}
	void toggle(uint32_t index) {}
	bool isSet(uint32_t index) {}
};

/*
bit 0 is the rightmost bit

0000000000000000000000000000000000000000000000000000000000000000	64 bits
0000000000000000000000000000000000000000000000000000000000000001

1 << k 			left shift
1 << 3

0000000000000000000000000000000000000000000000000000000000010000


1010101010111110000111110101010101X1010101010101001010101
000000000000000000000000000000000010000000000000000000000
OR
101010101011111000011111010101010111010101010101001010101

x = x | (1 << k)	x |= 1 << k

HOW TO DO THIS with an array?
	
	bit = 100000; // how to split this into which word, which bit within?
	i = bit / 64;
	k = bit % 64;


	x[i] |= 1 << k 


1000000000 = 1024		/ 64 = 16
>> 6
10000 = 16

64 = 100000		63 = 0111111


	10000000000
AND	00000111111
	00000000000

	10000000011 = 1027
AND	00000111111
	00000000011 = 3

	x[ind >> 6] |= 1 << (ind & 63)



	&	~(1 << k)	CLEAR
	^	(1 << k)	TOGGLE

	test	return (bits[i] & (1 << k)) != 0	 	true or false
*/